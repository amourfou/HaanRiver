'use client';

import React, { useReducer, useState, useEffect } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import GameBoard from '@/components/GameBoard';
import GameUI from '@/components/GameUI';
import UserRegistration from '@/components/UserRegistration';
import MilitaryWarning from '@/components/MilitaryWarning';
import ScoreBoard from '@/components/ScoreBoard';
import TypingDialog from '@/components/TypingDialog';
import { gameReducer, initialGameState } from '@/lib/gameReducer';
import { GameAction, User } from '@/types/game';
import { 
  getUserIdFromCookie, 
  getUserFromSupabase, 
  getUserByNameFromSupabase,
  saveUserIdToCookie,
  clearUserIdFromCookie,
  createUserInSupabase, 
  updateUserScoreInSupabase,
  saveGameSession 
} from '@/lib/supabaseUserUtils';

export default function Home() {
  const [gameState, dispatch] = useReducer(gameReducer, initialGameState);
  const [showStartScreen, setShowStartScreen] = useState(true);
  const [showUserRegistration, setShowUserRegistration] = useState(false);
  const [showMilitaryWarning, setShowMilitaryWarning] = useState(false);
  const [showScoreBoard, setShowScoreBoard] = useState(false);
  const [showTypingDialog, setShowTypingDialog] = useState(false);
  const [duplicateName, setDuplicateName] = useState('');
  const [existingUser, setExistingUser] = useState<User | null>(null);
  const [currentUser, setCurrentUser] = useState<User | null>(null);

  const handleGameAction = (action: GameAction) => {
    dispatch(action);
  };

  // Ïª¥Ìè¨ÎÑåÌä∏ ÎßàÏö¥Ìä∏ Ïãú ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥ ÌôïÏù∏
  useEffect(() => {
    const checkUser = async () => {
      console.log('üîç ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥ ÌôïÏù∏ ÏãúÏûë');
      const userId = getUserIdFromCookie();
      console.log('üç™ Ïø†ÌÇ§ÏóêÏÑú Í∞ÄÏ†∏Ïò® ÏÇ¨Ïö©Ïûê ID:', userId);
      
      if (userId) {
        console.log('üì° SupabaseÏóêÏÑú ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥ Ï°∞Ìöå Ï§ë...');
        const user = await getUserFromSupabase(userId);
        if (user) {
          console.log('‚úÖ ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥ Î°úÎìú ÏÑ±Í≥µ:', user);
          console.log('üéØ ÏÇ¨Ïö©Ïûê ÏµúÍ≥† Ï†êÏàò:', user.highScore);
          setCurrentUser(user);
          // ÏÇ¨Ïö©ÏûêÏùò ÏµúÍ≥† Ï†êÏàòÎ•º Í≤åÏûÑ ÏÉÅÌÉúÏóê Î∞òÏòÅ
          console.log('üéÆ Í≤åÏûÑ ÏÉÅÌÉúÏóê ÏµúÍ≥† Ï†êÏàò ÏÑ§Ï†ï:', user.highScore);
          dispatch({ type: 'SET_HIGH_SCORE', payload: { highScore: user.highScore } });
        } else {
          console.log('‚ùå ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥Î•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§');
        }
        // ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥Í∞Ä ÏóÜÏñ¥ÎèÑ Î∞îÎ°ú Îì±Î°ù ÌôîÎ©¥ÏùÑ Î≥¥Ïó¨Ï£ºÏßÄ ÏïäÏùå
      } else {
        console.log('‚ùå Ïø†ÌÇ§Ïóê ÏÇ¨Ïö©Ïûê IDÍ∞Ä ÏóÜÏäµÎãàÎã§');
      }
      // ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥Í∞Ä ÏóÜÏñ¥ÎèÑ Î∞îÎ°ú Îì±Î°ù ÌôîÎ©¥ÏùÑ Î≥¥Ïó¨Ï£ºÏßÄ ÏïäÏùå
    };
    
    checkUser();
  }, []);

  const handleGameOver = async () => {
    dispatch({ type: 'GAME_OVER' });
    // Í≤åÏûÑ Ïò§Î≤Ñ Ïãú ÏÇ¨Ïö©Ïûê Ï†êÏàò ÏóÖÎç∞Ïù¥Ìä∏ Î∞è Í≤åÏûÑ ÏÑ∏ÏÖò Ï†ÄÏû•
    if (currentUser && gameState.score > 0) {
      await updateUserScoreInSupabase(currentUser.id, gameState.score);
      await saveGameSession(
        currentUser.id, 
        gameState.score, 
        gameState.round, 
        gameState.virusesReachedBottom
      );
    }
  };

  const handlePause = () => {
    dispatch({ type: 'PAUSE_GAME' });
  };

  const handleResume = () => {
    dispatch({ type: 'RESUME_GAME' });
  };

  const handleUserRegistration = async (name: string, organization: string) => {
    try {
      const newUser = await createUserInSupabase(name, organization);
      if (newUser) {
        console.log('ÏÉàÎ°ú ÏÉùÏÑ±Îêú ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥:', newUser);
        console.log('ÏÉà ÏÇ¨Ïö©Ïûê ÏµúÍ≥† Ï†êÏàò:', newUser.highScore);
        setCurrentUser(newUser);
        // ÏÇ¨Ïö©ÏûêÏùò ÏµúÍ≥† Ï†êÏàòÎ•º Í≤åÏûÑ ÏÉÅÌÉúÏóê Î∞òÏòÅ
        dispatch({ type: 'SET_HIGH_SCORE', payload: { highScore: newUser.highScore } });
        setShowUserRegistration(false);
        // Îì±Î°ù ÏôÑÎ£å ÌõÑ Î∞îÎ°ú Í≤åÏûÑ ÏãúÏûë
        setShowStartScreen(false);
        dispatch({ type: 'START_GAME' });
      } else {
        console.error('ÏÇ¨Ïö©Ïûê Îì±Î°ùÏóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.');
      }
    } catch (error: any) {
      if (error.message === 'DUPLICATE_NAME') {
        console.log('üéñÔ∏è Ï§ëÎ≥µ Ïù¥Î¶Ñ Í∞êÏßÄ! Í∏∞Ï°¥ ÏÇ¨Ïö©Ïûê Ï°∞Ìöå Ï§ë...');
        // Ï§ëÎ≥µ Ïù¥Î¶ÑÏù∏ Í≤ΩÏö∞ Í∏∞Ï°¥ ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥ Ï°∞Ìöå
        try {
          const existingUser = await getUserByNameFromSupabase(name);
          if (existingUser) {
            console.log('üéñÔ∏è Í∏∞Ï°¥ ÏÇ¨Ïö©Ïûê Î∞úÍ≤¨:', existingUser);
            // Í∏∞Ï°¥ ÏÇ¨Ïö©ÏûêÎ°ú Î∞îÎ°ú Í≤åÏûÑ ÏãúÏûë (ÌÉÄÏù¥Ìïë ÎåÄÌôîÏ∞Ω ÏóÜÏù¥)
            setCurrentUser(existingUser);
            dispatch({ type: 'SET_HIGH_SCORE', payload: { highScore: existingUser.highScore } });
            saveUserIdToCookie(existingUser.id);
            setShowUserRegistration(false);
            setShowStartScreen(false);
            dispatch({ type: 'START_GAME' });
            console.log('üéñÔ∏è Í∏∞Ï°¥ ÏÇ¨Ïö©ÏûêÎ°ú Î∞îÎ°ú Í≤åÏûÑ ÏãúÏûëÎê®');
          } else {
            console.log('‚ùå Í∏∞Ï°¥ ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥Î•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§');
            // Í∏∞Ï°¥ ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥Î•º Ï∞æÏùÑ Ïàò ÏóÜÎäî Í≤ΩÏö∞ Í≤ΩÍ≥† ÌëúÏãú
            setDuplicateName(name);
            setShowMilitaryWarning(true);
            setShowUserRegistration(false);
          }
        } catch (lookupError) {
          console.error('Í∏∞Ï°¥ ÏÇ¨Ïö©Ïûê Ï°∞Ìöå Ïã§Ìå®:', lookupError);
          setDuplicateName(name);
          setShowMilitaryWarning(true);
          setShowUserRegistration(false);
        }
      } else {
        console.error('ÏÇ¨Ïö©Ïûê Îì±Î°ùÏóê Ïã§Ìå®ÌñàÏäµÎãàÎã§:', error);
      }
    }
  };

  const handleCancelRegistration = () => {
    setShowUserRegistration(false);
    // Î©îÏù∏ ÌôîÎ©¥ÏúºÎ°ú ÎèåÏïÑÍ∞ÄÍ∏∞
  };

  const handleCloseMilitaryWarning = () => {
    setShowMilitaryWarning(false);
    setShowUserRegistration(true); // Îã§Ïãú Îì±Î°ù ÌôîÎ©¥ÏúºÎ°ú
  };

  const handleShowScoreBoard = () => {
    setShowScoreBoard(true);
    setShowStartScreen(false); // Ï†êÏàòÎ≥¥Í∏∞ ÌôîÎ©¥Ïù¥ Î≥¥Ïù¥ÎèÑÎ°ù ÏãúÏûë ÌôîÎ©¥ Ïà®ÍπÄ
    // Í≤åÏûÑÏùÄ ÏãúÏûëÌïòÏßÄ ÏïäÏùå - Ï†êÏàòÎ≥¥Í∏∞Îßå ÌëúÏãú
  };

  const handleCloseScoreBoard = () => {
    setShowScoreBoard(false);
    setShowStartScreen(true);
  };

  const handleLogout = () => {
    // Ïø†ÌÇ§ ÏÇ≠Ï†ú
    clearUserIdFromCookie();
    // ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥ Ï¥àÍ∏∞Ìôî
    setCurrentUser(null);
    // Í≤åÏûÑ ÏÉÅÌÉú Ï¥àÍ∏∞Ìôî
    dispatch({ type: 'RESET_GAME' });
    // Î©îÏù∏ ÌôîÎ©¥ÏúºÎ°ú ÎèåÏïÑÍ∞ÄÍ∏∞
    setShowScoreBoard(false);
    setShowStartScreen(true);
  };


  const handleTypingDialogComplete = () => {
    console.log('üéñÔ∏è ÌÉÄÏù¥Ìïë ÎåÄÌôîÏ∞Ω ÏôÑÎ£å Ìï®Ïàò Ìò∏Ï∂úÎê®');
    if (existingUser) {
      console.log('üéñÔ∏è Í∏∞Ï°¥ ÏÇ¨Ïö©ÏûêÎ°ú Í≤åÏûÑ ÏãúÏûë:', existingUser);
      setCurrentUser(existingUser);
      dispatch({ type: 'SET_HIGH_SCORE', payload: { highScore: existingUser.highScore } });
      // Í∏∞Ï°¥ ÏÇ¨Ïö©Ïûê Ïø†ÌÇ§ Ï†ÄÏû•
      saveUserIdToCookie(existingUser.id);
      setShowTypingDialog(false);
      setShowStartScreen(false);
      // Í≤åÏûÑ ÏãúÏûë - resetGameÏù¥ÎÇò handleExit Ìò∏Ï∂úÌïòÏßÄ ÏïäÏùå
      dispatch({ type: 'START_GAME' });
      console.log('üéñÔ∏è Í≤åÏûÑ ÏãúÏûë Î™ÖÎ†π Ïã§ÌñâÎê®');
    }
  };

  const startGame = () => {
    // ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥Í∞Ä ÏóÜÏúºÎ©¥ Îì±Î°ù ÌôîÎ©¥ ÌëúÏãú
    if (!currentUser) {
      setShowUserRegistration(true);
      return;
    }
    
    // ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥Í∞Ä ÏûàÏúºÎ©¥ Î∞îÎ°ú Í≤åÏûÑ ÏãúÏûë
    setShowStartScreen(false);
    dispatch({ type: 'START_GAME' });
  };

  const resetGame = () => {
    dispatch({ type: 'RESET_GAME' });
    setShowStartScreen(true);
  };

  const handleExit = () => {
    dispatch({ type: 'RESET_GAME' });
    setShowStartScreen(true);
  };

  return (
    <div className="game-container">
      <AnimatePresence>
        {showUserRegistration && (
          <UserRegistration 
            onRegister={handleUserRegistration} 
            onCancel={handleCancelRegistration}
          />
        )}
      </AnimatePresence>

      <AnimatePresence>
        {showMilitaryWarning && (
          <MilitaryWarning 
            onClose={handleCloseMilitaryWarning}
            duplicateName={duplicateName}
          />
        )}
      </AnimatePresence>

      <AnimatePresence>
        {showScoreBoard && (
          <ScoreBoard 
            onClose={handleCloseScoreBoard}
            currentUser={currentUser}
          />
        )}
      </AnimatePresence>

      <AnimatePresence>
        {showTypingDialog && existingUser && (
          <TypingDialog 
            text={`Ïò§, ${existingUser.name} ÏûêÎÑ§ÏòÄÍµ∞. Í∏∞Îã§Î¶¨Í≥† ÏûàÏóàÎÑ§. ÏßÄÍ∏à ÏÉÅÌô©Ïù¥ Ï¢ãÏßà ÏïäÏïÑ. Ïñ¥ÏÑú Ï†ÑÏû•ÏúºÎ°ú Í∞ÄÍ≤å!`}
            onComplete={handleTypingDialogComplete}
          />
        )}
      </AnimatePresence>

      <AnimatePresence>
        {showStartScreen && !showUserRegistration && (
          <motion.div
            className="absolute inset-0 flex items-center justify-center z-50"
            style={{
              backgroundImage: 'url(/images/backgroundmenu.PNG)',
              backgroundSize: '100% 100%',
              backgroundPosition: 'center',
              backgroundRepeat: 'no-repeat'
            }}
            initial={{ opacity: 1 }}
            exit={{ opacity: 0 }}
            transition={{ duration: 0.5 }}
          >

            {/* Î©îÏù∏ ÌÉÄÏù¥ÌãÄ */}
            <div className="text-center text-white z-10" style={{ textShadow: '2px 2px 4px rgba(0,0,0,0.8)' }}>
              <motion.h1
                className="text-6xl md:text-8xl font-bold mb-4 gradient-text"
                initial={{ y: -50, opacity: 0 }}
                animate={{ y: 0, opacity: 1 }}
                transition={{ delay: 0.2, duration: 0.8 }}
              >
                HaanRiver
              </motion.h1>
              
              {/* ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥ ÌëúÏãú */}
              {currentUser ? (
                <motion.div
                  className="mb-6 p-4 bg-black bg-opacity-50 rounded-lg backdrop-blur-sm border border-virus-green max-w-md mx-auto"
                  initial={{ y: -20, opacity: 0 }}
                  animate={{ y: 0, opacity: 1 }}
                  transition={{ delay: 0.3, duration: 0.6 }}
                >
                  <div className="text-virus-green text-lg font-bold mb-2 text-center">
                    üéñÔ∏è ÌôòÏòÅÌï©ÎãàÎã§!
                  </div>
                  <div className="text-white text-base font-semibold mb-1 text-center break-words">
                    {currentUser.name}Îãò
                  </div>
                  <div className="text-white text-sm text-center break-words">
                    ÏÜåÏÜç: {currentUser.organization}
                  </div>
                  <div className="text-virus-green text-sm font-semibold text-center mb-3">
                    ÏµúÍ≥† Ï†êÏàò: {currentUser.highScore.toLocaleString()}Ï†ê
                  </div>
                  <button
                    onClick={handleLogout}
                    className="w-full bg-red-600 text-white font-bold py-2 px-4 rounded-lg hover:bg-red-500 transition-colors text-sm"
                  >
                    üö™ Î°úÍ∑∏ÏïÑÏõÉ
                  </button>
                </motion.div>
              ) : (
                <motion.div
                  className="mb-6 p-4 bg-black bg-opacity-50 rounded-lg backdrop-blur-sm border border-gray-600 max-w-md mx-auto"
                  initial={{ y: -20, opacity: 0 }}
                  animate={{ y: 0, opacity: 1 }}
                  transition={{ delay: 0.3, duration: 0.6 }}
                >
                  <div className="text-white text-lg font-bold mb-2 text-center">
                    üöÄ ÏÉàÎ°úÏö¥ ÏûÑÎ¨¥Î•º ÏãúÏûëÌïòÏÑ∏Ïöî!
                  </div>
                  <div className="text-gray-300 text-sm text-center">
                    Í≤åÏûÑ ÏãúÏûë Ïãú Ïã†Î∂Ñ Îì±Î°ùÏù¥ ÌïÑÏöîÌï©ÎãàÎã§
                  </div>
                </motion.div>
              )}
              
              {showStartScreen && (
                <>
                  <motion.h2
                    className="text-2xl md:text-3xl font-semibold mb-8"
                    initial={{ y: -30, opacity: 0 }}
                    animate={{ y: 0, opacity: 1 }}
                    transition={{ delay: 0.4, duration: 0.8 }}
                  >
                    üöÄ ÌïúÍ∞ïÏùÑ ÏßÄÏºúÎùº!
                  </motion.h2>

                  <motion.div
                    className="max-w-md mx-auto mb-8 text-lg"
                    initial={{ y: 30, opacity: 0 }}
                    animate={{ y: 0, opacity: 1 }}
                    transition={{ delay: 0.6, duration: 0.8 }}
                  >
                    <p className="mb-4">
                      Ïö∞Ï£ºÏóêÏÑú Ïô∏Í≥ÑÏù∏Ïù¥ Î∞îÏù¥Îü¨Ïä§Î•º ÎøåÎ¶¨Í≥† ÏûàÏñ¥Ïöî!
                    </p>
                    <p className="mb-4">
                      Î∞îÏù¥Îü¨Ïä§Î•º ÌÑ∞ÏπòÌï¥ÏÑú Ïà´Ïûê Ìï©Ïù¥ <span className="text-virus-green font-bold">10</span> ÎòêÎäî <span className="text-virus-green font-bold">20</span>Ïù¥ ÎêòÎ©¥ Ï†úÍ±∞Îê©ÎãàÎã§.
                    </p>
                    <p className="text-sm text-gray-300">
                      ÌïúÍ∞ïÏù¥ Ïò§ÏóºÎêòÍ∏∞ Ï†ÑÏóê Î™®Îì† Î∞îÏù¥Îü¨Ïä§Î•º Ï†úÍ±∞ÌïòÏÑ∏Ïöî!
                    </p>
                  </motion.div>
                </>
              )}

              <div className="flex flex-col sm:flex-row gap-4 justify-center items-center max-w-sm mx-auto">
                <motion.button
                  className="bg-virus-green bg-opacity-80 backdrop-blur-sm text-black font-bold text-xl px-6 py-3 rounded-lg hover:bg-opacity-90 transition-all duration-300 transform hover:scale-105 flex-shrink-0"
                  onClick={startGame}
                  initial={{ scale: 0.8, opacity: 0 }}
                  animate={{ scale: 1, opacity: 1 }}
                  transition={{ delay: 0.8, duration: 0.5 }}
                  whileHover={{ scale: 1.05 }}
                  whileTap={{ scale: 0.95 }}
                >
                  {currentUser ? 'üéÆ Í≤åÏûÑ ÏãúÏûë' : 'üéÆ Í≤åÏûÑ ÏãúÏûë'}
                </motion.button>

                <motion.button
                  className="bg-gray-700 bg-opacity-80 backdrop-blur-sm text-white font-bold text-xl px-6 py-3 rounded-lg hover:bg-opacity-90 transition-all duration-300 transform hover:scale-105 flex-shrink-0"
                  onClick={handleShowScoreBoard}
                  initial={{ scale: 0.8, opacity: 0 }}
                  animate={{ scale: 1, opacity: 1 }}
                  transition={{ delay: 0.9, duration: 0.5 }}
                  whileHover={{ scale: 1.05 }}
                  whileTap={{ scale: 0.95 }}
                >
                  üèÜ Ï†êÏàòÎ≥¥Í∏∞
                </motion.button>
              </div>

              {/* Í≤åÏûÑ ÏÑ§Î™Ö */}
              <motion.div
                className="mt-12 text-sm text-gray-300 max-w-sm mx-auto"
                initial={{ y: 50, opacity: 0 }}
                animate={{ y: 0, opacity: 1 }}
                transition={{ delay: 1, duration: 0.8 }}
              >
                <div className="bg-black bg-opacity-60 backdrop-blur-sm rounded-lg p-4">
                  <h3 className="font-bold text-white mb-2">Í≤åÏûÑ Î∞©Î≤ï</h3>
                  <ul className="text-left space-y-1">
                    <li>‚Ä¢ Î∞îÏù¥Îü¨Ïä§Î•º ÌÑ∞ÏπòÌïòÏó¨ ÏÑ†ÌÉù</li>
                    <li>‚Ä¢ ÏÑ†ÌÉùÎêú Ïà´ÏûêÎì§Ïùò Ìï©Ïù¥ 10 ÎòêÎäî 20</li>
                    <li>‚Ä¢ Î∞îÏù¥Îü¨Ïä§Í∞Ä ÌïúÍ∞ïÏóê ÎãøÏúºÎ©¥ Í≤åÏûÑ Ïò§Î≤Ñ</li>
                    <li>‚Ä¢ Î†àÎ≤®Ïù¥ Ïò¨ÎùºÍ∞àÏàòÎ°ù ÏÜçÎèÑ Ï¶ùÍ∞Ä</li>
                  </ul>
                </div>
              </motion.div>
            </div>

          </motion.div>
        )}
      </AnimatePresence>

      {!showStartScreen && !showUserRegistration && !showMilitaryWarning && !showScoreBoard && (
        <>
          <GameBoard
            gameState={gameState}
            onGameAction={handleGameAction}
            onGameOver={handleGameOver}
            onResetGame={resetGame}
          />
          <GameUI
            gameState={gameState}
            onPause={handlePause}
            onResume={handleResume}
            onExit={handleExit}
            currentUser={currentUser}
          />
        </>
      )}
    </div>
  );
}
